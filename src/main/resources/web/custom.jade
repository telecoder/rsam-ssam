doctype html
html(lang="en")

  head
    title RSAM & SSAM
    meta(name="viewport", content="width=device-width, initial-scale=1")
    link(rel="stylesheet", href="web/uikit.min.css")
    script(src='web/uikit.min.js')
    link(rel="stylesheet", href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css")
    script(src="https://cdn.jsdelivr.net/npm/flatpickr")

  body
  
    .uk-flex.uk-flex-middle.uk-padding-small.uk-margin-large-left.uk-margin-large-right
        div
            a(href="/", class="uk-h2 uk-link-heading") RSAM & SSAM
    hr(class="uk-margin-remove-vertical")

    .uk-container-xsmall.uk-align-center
        form(name="queryParams", action="/custom", method="post")
            table(class="uk-table uk-table-divider uk-table-small")
                thead
                    tr
                        th(class="uk-text-primary") Station
                        th(class="uk-text-primary") Component
                        th(class="uk-text-primary") Network
                        th(class="uk-text-primary") Location
                tbody
                    td
                        input(id="station", name="S", type="text", maxlength="5", class="uk-input", value =context.S, required, onkeyup="checkEmpty('station')")
                    td
                        input(id="component", name="C", type="text", maxlength="3", class="uk-input", value=context.C, required, onkeyup="checkEmpty('component')")
                    td
                        input(id="network", name="N", type="text", maxlength="2", class="uk-input", value=context.N, required, onkeyup="checkEmpty('network')")
                    td
                        input(id="location", name="L", type="text", maxlength="2", class="uk-input", value=context.L)

            table(class="uk-table uk-table-divider uk-table-small")
                thead
                    tr
                        th(class="uk-text-primary") From (UTC start of day)
                        th(class="uk-text-primary") To (UTC end of day)
                tbody
                    td
                        input(id="from", name="from", type="text", class="uk-input date", value=context.from, autocomplete="off", required, oninput="checkTimespans()")
                    td
                        input(id="to", name="to", type="text", class="uk-input date", value=context.to, autocomplete="off", required, oninput="checkTimespans()")

            table(class="uk-table uk-table-divider uk-table-small")
                thead
                    tr
                        th(class="uk-text-primary uk-width-1-3") Window Size
                        th(class="uk-text-primary uk-width-1-3") Window Function
                        th(class="uk-text-primary uk-width-1-3") Cutoff Frequency
                tbody
                    td
                        select(id="windowSize", name="windowSize", class="uk-input")
                            for ws in context.windowSizes
                                option(value=ws selected= ws == context.windowSize) #{ws}
                    td
                        select(id="windowFunction", name="windowFunction", class="uk-input")
                            for wf in context.windowFunctions
                                option(value=wf, selected= wf == context.windowFunction) #{wf}
                    td
                        input(id="cutoff", name="cutoff", type="number", maxlength="3", required, class="uk-input", value=context.cutoff)

            table(class="uk-table uk-table-divider uk-table-small")
                thead
                    tr
                        th(class="uk-text-primary uk-width-1-4") Graph Format
                        th(class="uk-text-primary uk-width-1-4") Width
                        th(class="uk-text-primary uk-width-1-4") Height
                        th(class="uk-text-primary uk-width-1-4") Max Power
                tbody
                    td
                        select(id="graphFormat", name="graphFormat", class="uk-input")
                            for gf in context.graphFormats
                                option(value=gf, selected= (gf == context.graphFormat)) #{gf}
                    td
                        input(id="graphWidth", name="graphWidth", type="number", class="uk-input" value=context.graphWidth, required)
                    td
                        input(id="graphHeight", name="graphHeight", type="number", class="uk-input" value=context.graphHeight, onkeyup="checkEmpty('graphHeight')")
                    td
                        input(id="maxPower", name="maxPower", type="number", maxlength="3", required, class="uk-input", value=context.maxPower)

            input(type="hidden", name="webQuery" value="true")
            button(id="apply", type="submit", class="uk-button uk-button-primary uk-width-1-1") Go!
    
    script.
        document.addEventListener("DOMContentLoaded", function () {
                flatpickr('.date', {
                    animated: true,
                    closeOnSelect: true,
                    allowInput: true

                });
            });
            document.addEventListener("DOMContentLoaded", function () {
                flatpickr('.fromTime', {
                    animated: true,
                    enableTime: true,
                    noCalendar: true,
                    time_24hr: true,
                    closeOnSelect: true,
                    defaultDate: "00:00",
                    allowInput: true
                });
            });
            document.addEventListener("DOMContentLoaded", function () {
                flatpickr('.toTime', {
                    animated: true,
                    enableTime: true,
                    noCalendar: true,
                    time_24hr: true,
                    closeOnSelect: true,
                    defaultDate: "00:00",
                    allowInput: true
                });
            });
            function checkEmpty(input) {
                var element = document.getElementById(input);
                if (element.value.length < 1) {
                    element.classList.add("uk-form-danger");
                } else {
                    element.classList.remove("uk-form-danger");
                }
            }
            function checkTimespans() {
                var button = document.getElementById("apply");
                if (checkDate('from') && checkDate('to')) {
                    var fromDate = document.getElementById("from").value;
                    var fromDate = new Date(fromDate);
                    var toDate = document.getElementById("to").value;
                    var toDate = new Date(toDate);
                    if (fromDate <= toDate) {
                        button.disabled = false;
                        return;
                    }
                }
                button.disabled = true;
            }
            function checkDate(element) {
                var dateRegex = /^([12]\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01]))$/;
                if (dateRegex.test(document.getElementById(element).value)) {
                    return true;
                } else {
                    return false;
                }
            }
            function checkTime(element) {
                var timeRegex = /^([0-9]|0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$/;
                if (timeRegex.test(document.getElementById(element).value)) {
                    return true;
                } else {
                    return false;
                }
            }